# ─────────────────────────  Google OAuth2  ─────────────────────────
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}

# scopes you want Google to ask for
spring.security.oauth2.client.registration.google.scope=openid,profile,email

# Spring replaces {baseUrl} with http://localhost:8080 by default
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# (The next three lines are actually already the Spring defaults,
#   but writing them out makes the config self-contained.)
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo

# Which claim to treat as the user name. Google’s OpenID spec uses “sub”.
spring.security.oauth2.client.provider.google.user-name-attribute=sub

spring.data.mongodb.uri=mongodb://localhost:27017/MovieMind

reco.fastapi.base-url=http://localhost:8000